server.port= 8081

#We giving name Application 
#spring.application.name= USER-SERVICE

# DataBase Configuration

spring.datasource.url = jdbc:mysql://localhost:3306/userserviceinmicroservices
spring.datasource.username = root
spring.datasource.password = root
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Configuration Hibernate

spring.jpa.hibernate.ddl-auto=update 
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

#Configuration for implementing service discovery client

#eureka.instance.prefer-ip-address= true
#When you set eureka.instance.prefer-ip-address=true, it means that the service instance will 
#register with Eureka using its IP address instead of its hostname
#eureka.client.fetch-registry= true
#eureka.client.register-with-eureka= true
#eureka.client.service-url.defaultZone= http://localhost:8761/eureka
#it will use above url to register with Eureka server.

spring.config.import= configserver:http://localhost:8084
#property is used to import additional configuration files or settings into your application

spring.profiles.active= dev

# ** Actuator configuration **
#These settings are related to Spring Boot Actuator, which provides 
#production-ready features for monitoring and managing your application.
management.health.circuitbreakers.enabled= true
#This setting enables or disables the health indicator for circuit breakers.
#When enabled, the health indicator will provide information about the 
#status of circuit breakers in your application.
management.endpoints.web.exposure.include= health
# This setting specifies which endpoints are exposed over the web. 
#In this case, only the health endpoint will be exposed. Endpoints are URLs 
#that can be used to interact with your application. 
#By setting this property, you're restricting access to only the health endpoint,
# making it available for external monitoring tools or services.
management.endpoint.health.show-details= always
#Setting it to "always" means that detailed health information will always be 
#shown when accessing the health endpoint

#  ** Resilence4j configuration ** for circuit braker
resilience4j.circuitbreaker.instances.ratingHotelBreaker.registerHealthIndicator= true
resilience4j.circuitbreaker.instances.ratingHotelBreaker.slidingWindowSize= 10
#The circuit breaker keeps track of the outcomes of the last 10 calls (successes and failures) within the sliding window.
resilience4j.circuitbreaker.instances.ratingHotelBreaker.minimumNumberOfCalls= 5
#the circuit breaker won't open or close until it has received at least 5 calls. 
#Once it has received 5 calls, it evaluates the failure rate based on these 5 calls 
#within the sliding window and makes a decision to open or close the circuit.
resilience4j.circuitbreaker.instances.ratingHotelBreaker.waitDurationInOpenState= 6s
resilience4j.circuitbreaker.instances.ratingHotelBreaker.permittedNumberOfCallsInHalfOpenState= 3
resilience4j.circuitbreaker.instances.ratingHotelBreaker.failureRateThreshold= 50
resilience4j.circuitbreaker.instances.ratingHotelBreaker.eventConsumerBufferSize= 10
resilience4j.circuitbreaker.instances.ratingHotelBreaker.automaticTransitionFromOpenToHalfOpenEnabled= true
resilience4j.circuitbreaker.instances.ratingHotelBreaker.slidingWindowType= COUNT_BASED

#  ** Resilence4j configuration ** for Retry
resilience4j.retry.instances.ratingHotelRetry.max-attempts= 3
resilience4j.retry.instances.ratingHotelRetry.wait-duration= 10s

#Configuration for okta
okta.oauth2.issuer= https://dev-37074283.okta.com/oauth2/default
okta.oauth2.audience= api://default

#Configuration for ResourseServer and client
spring.security.oauth2.resourceserver.jwt.issuer-uri= https://dev-37074283.okta.com/oauth2/default
spring.security.oauth2.client.registration.UserServiceAsClient.provider= okta
spring.security.oauth2.client.registration.UserServiceAsClient.authorization-grant-type= client_credentials
spring.security.oauth2.client.registration.UserServiceAsClient.scope= internal
spring.security.oauth2.client.registration.UserServiceAsClient.client-id= 0oaclkobkjNpG4lXb5d7
spring.security.oauth2.client.registration.UserServiceAsClient.client-secret= CdI8oc3JBTsRwdwfOypVAAMh0YXEEufqgzWkyK8yZMn7EpaRE52HjD7BXSl5c1Wo

spring.security.oauth2.client.provider.okta.issuer-uri= https://dev-37074283.okta.com/oauth2/default


